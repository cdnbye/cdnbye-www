(window.webpackJsonp=window.webpackJsonp||[]).push([[115],{898:function(t,e,a){"use strict";a.r(e);var n=a(1),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"create-instance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-instance"}},[t._v("#")]),t._v(" Create instance")]),t._v(" "),a("h3",{attrs:{id:"var-engine-new-p2penginedash-player-p2pconfig-opts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-engine-new-p2penginedash-player-p2pconfig-opts"}},[t._v("#")]),t._v(" var engine = new P2PEngineDash(player, {p2pConfig: [opts]});")]),t._v(" "),a("p",[t._v("Create a new "),a("em",[a("strong",[t._v("P2PEngineDash")])]),t._v(" instance, "),a("em",[a("strong",[t._v("player")])]),t._v(" is an instance of "),a("em",[a("strong",[t._v("dashjs#MediaPlayer")])]),t._v(" .")]),t._v(" "),a("p",[t._v("If "),a("em",[a("strong",[t._v("opts")])]),t._v(" is specified, then the default options (shown below) will be overridden.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Field")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Default")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("logLevel")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string|boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'error'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Print log level(warn, error, none，false=none, true=warn).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("token")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("RouterLink",{attrs:{to:"/en/views/bindings.html"}},[t._v("token")]),t._v("is used to summarize and display multi domain name data on the console. In addition, token is required while customizing channelId.")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("trackerZone")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'eu'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The country code name of the tracker server address('eu', 'hk', 'us').")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("memoryCacheLimit")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('{"pc": 400 * 1024 * 1024, "mobile": 100 * 1024 * 1024}')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The max size of binary data that can be stored in the cache.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("p2pEnabled")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Enable or disable p2p engine.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("webRTCConfig")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("{}")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("A "),a("a",{attrs:{href:"https://github.com/feross/simple-peer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Configuration dictionary"),a("OutboundLink")],1),t._v(" providing options to configure WebRTC connections.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("useHttpRange")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Use HTTP ranges requests where it is possible. Allows to continue (and not start over) aborted P2P downloads over HTTP.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("httpLoadTime")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("3.0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Time for HTTP download if p2p download timeout.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("showSlogan")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Display slogan of cdnbye on console.")])])])]),t._v(" "),a("h2",{attrs:{id:"p2penginedash-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginedash-api"}},[t._v("#")]),t._v(" P2PEngineDash API")]),t._v(" "),a("h4",{attrs:{id:"p2penginedash-version-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginedash-version-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2PEngineDash.version")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("Get the version of P2PEngineDash.")]),t._v(" "),a("h4",{attrs:{id:"p2penginedash-protocolversion-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginedash-protocolversion-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2PEngineDash.protocolVersion")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("Get the version of P2P protocol.")]),t._v(" "),a("h4",{attrs:{id:"p2penginedash-issupported-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginedash-issupported-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2PEngineDash.isSupported()")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("Returns true if WebRTC data channel is supported by the browser.")]),t._v(" "),a("h4",{attrs:{id:"engine-enablep2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-enablep2p"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.enableP2P()")])])]),t._v(" "),a("p",[t._v("Resume P2P if it has been stopped.")]),t._v(" "),a("h4",{attrs:{id:"engine-disablep2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-disablep2p"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.disableP2P()")])])]),t._v(" "),a("p",[t._v("Disable engine to stop p2p and free used resources.")]),t._v(" "),a("h4",{attrs:{id:"engine-destroy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-destroy"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.destroy()")])])]),t._v(" "),a("p",[t._v("Stop p2p and free used resources.")]),t._v(" "),a("h2",{attrs:{id:"p2penginedash-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginedash-events"}},[t._v("#")]),t._v(" P2PEngineDash Events")]),t._v(" "),a("h4",{attrs:{id:"engine-on-peerid-function-peerid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peerid-function-peerid"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('peerId', function (peerId) {})")])])]),t._v(" "),a("p",[t._v("Emitted when the peer Id of this client is obtained from server.")]),t._v(" "),a("h4",{attrs:{id:"engine-on-peers-function-peers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peers-function-peers"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('peers', function (peers) {})")])])]),t._v(" "),a("p",[t._v("Emitted when successfully connected with new peer.")]),t._v(" "),a("h4",{attrs:{id:"engine-on-stats-function-stats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-stats-function-stats"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('stats', function (stats) {})")])])]),t._v(" "),a("p",[t._v("Emitted when data is downloaded/uploaded."),a("br"),t._v("\nstats.totalHTTPDownloaded: total data downloaded by HTTP(KB)."),a("br"),t._v("\nstats.totalP2PDownloaded: total data downloaded by P2P(KB)."),a("br"),t._v("\nstats.totalP2PUploaded: total data uploaded by P2P(KB)."),a("br"),t._v("\nstats.p2pDownloadSpeed: p2p download speed(KB/s).")]),t._v(" "),a("h3",{attrs:{id:"engine-on-serverconnected-function-connected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-serverconnected-function-connected"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('serverConnected', function (connected) {})")])])]),t._v(" "),a("p",[t._v("Emitted when websocket is opened/closed.")]),t._v(" "),a("h3",{attrs:{id:"engine-on-exception-function-e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-exception-function-e"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('exception', function (e) {})")])])]),t._v(" "),a("p",[t._v("Emitted when exception occured."),a("br"),t._v("\ne.code: Exception identifier（TRACKER_EXPT SIGNAL_EXPT DASHJS_EXPT）"),a("br"),t._v("\ne.message: Exception message "),a("br"),t._v("\ne.stack: Exception stack "),a("br")]),t._v(" "),a("h3",{attrs:{id:"get-p2p-information-from-p2pconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-p2p-information-from-p2pconfig"}},[t._v("#")]),t._v(" Get p2p information from p2pConfig")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getStats")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("totalP2PDownloaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalP2PUploaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalHTTPDownloaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2pDownloadSpeed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the downloading statistics")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeerId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peerId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get peer Id")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeersInfo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get peers information")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"advanced-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage"}},[t._v("#")]),t._v(" Advanced Usage")]),t._v(" "),a("h3",{attrs:{id:"dynamic-mpd-path-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-mpd-path-support"}},[t._v("#")]),t._v(" Dynamic MPD Path Support")]),t._v(" "),a("p",[t._v("Some MPD urls play the same live/vod but have different paths on them. For example,\nexample.com/clientId1/streamId.mpd and example.com/clientId2/streamId.mpd. In this case, you can format a common channelId for them.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set token in p2pConfig before setting channelId!")]),t._v("\np2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("mpdUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extractVideoIdFromUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("mpdUrl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// make a channelId by removing the different part which is defined by yourself")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// channelId: VIDEO_ID       // for fixed channel id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"dynamic-segment-path-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-segment-path-support"}},[t._v("#")]),t._v(" Dynamic Segment Path Support")]),t._v(" "),a("p",[t._v("Like dynamic mpd path, you should format a common segmentId for the same segment file. You can override the segment ID like this:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n        streamId: The id of stream\n        sn: The serial number of segment\n        segmentUrl: The url of segment\n        range: bytes range of segmentUrl\n     */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("segmentId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("segmentUrl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" range")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" segId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extractSegmentIdFromUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segmentUrl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"use-your-own-stun-or-turn-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-your-own-stun-or-turn-server"}},[t._v("#")]),t._v(" Use Your Own STUN or TURN Server")]),t._v(" "),a("p",[t._v("STUN (Session Traversal Utilities for NAT) allows clients to discover their public IP address and the type of NAT they are behind. This information is used to establish the media connection. Although there are default STUN servers in this SDK, you can replace them with your own via P2PConfig. TURN (Traversal Using Relays around NAT) server is used to relay traffic if direct connection fails. You can config your "),a("a",{attrs:{href:"https://github.com/coturn/coturn",target:"_blank",rel:"noopener noreferrer"}},[t._v("TURN"),a("OutboundLink")],1),t._v(" server in the same way as STUN.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    webRTCConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       iceServers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" urls"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_STUN_OR_TURN_SERVER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"allow-http-range-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#allow-http-range-request"}},[t._v("#")]),t._v(" Allow Http Range Request")]),t._v(" "),a("p",[t._v("If http range request is activated, we are able to get chunks of data from peer and then complete the segments by getting other chunks from the CDN, thus, reducing your CDN bandwidth. Besides, the code below is needed：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    useHttpRange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"how-to-check-segment-validity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-check-segment-validity"}},[t._v("#")]),t._v(" How to Check Segment Validity")]),t._v(" "),a("p",[t._v("Sometimes we need to prevent a peer from sending a fake segment\n(such as the bittorrent with a hash function).\nCDNBye provides a validation callback with buffer of the\ndownloaded segment, developer should implement the actual\nvalidator. For example, you can create a program that generates\nhashes for the segments and stores them in a specific file or\ninjects into m3u8 playlist files the hashes information. If\nthe callback returns false, then the segment is not valid.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("validateSegment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hashFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);