(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{904:function(t,e,a){"use strict";a.r(e);var s=a(1),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"p2penginehls-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-api"}},[t._v("#")]),t._v(" P2pEngineHls API")]),t._v(" "),a("h3",{attrs:{id:"var-engine-new-p2penginehls-p2pconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-engine-new-p2penginehls-p2pconfig"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("var engine = new P2pEngineHls(p2pConfig);")])])]),t._v(" "),a("p",[t._v("Create a new "),a("em",[a("strong",[t._v("P2pEngineHls")])]),t._v(" instance.")]),t._v(" "),a("p",[t._v("If "),a("em",[a("strong",[t._v("p2pConfig")])]),t._v(" is specified, then the default options (shown below) will be overridden.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Field")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Default")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("hlsjsInstance")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Hlsjs")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("If the instance of hlsjs is not passed in, the hlsjs based engine will not be enabled.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("proxyOnly")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Force to enable ServiceWorker based engine.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("logLevel")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string|boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'error'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Print log level(warn, error, noneï¼Œfalse=none, true=warn).")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("token")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("RouterLink",{attrs:{to:"/en/views/bindings.html"}},[t._v("token")]),t._v("is used to summarize and display multi domain name data on the console. In addition, token is required while customizing channelId.")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("live")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("tell engine whether in live or VOD mode.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("trackerZone")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'eu'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The country code name of the tracker server address('eu', 'hk', 'us').")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("memoryCacheLimit")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('{"pc": 600 * 1024 * 1024, "mobile": 300 * 1024 * 1024}')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The max size of binary data that can be stored in the memory cache.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("p2pEnabled")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Enable or disable p2p engine.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("webRTCConfig")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("{}")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("A "),a("a",{attrs:{href:"https://github.com/feross/simple-peer",target:"_blank",rel:"noopener noreferrer"}},[t._v("Configuration dictionary"),a("OutboundLink")],1),t._v(" providing options to configure WebRTC connections.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("useHttpRange")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Use HTTP ranges requests where it is possible. Allows to continue (and not start over) aborted P2P downloads over HTTP.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("httpLoadTime")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("2.5")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Time for HTTP download if p2p download timeout.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("sharePlaylist")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Allow the P2P transmission of m3u8 file.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("showSlogan")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Display slogan of cdnbye on console.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("strictSegmentId")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Use segment url based segment id instead of sequence number based one.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("geoIpPreflight")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Make a preflight request to online Geo IP database provider to get ASN and geo-related information.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("swAutoRegister")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Whether to automatically register serviceworker after initializing the engine based on serviceworker.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("swFile")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'./sw.js'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The file name and path of ServiceWorker.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("swScope")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'./'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The default scope is the location of the ServiceWorker file, and extends to all directories below. So if sw.js is located in the root directory, the ServiceWorker will control requests from all files at this domain.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("mediaElem")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HTMLMediaElement|string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Specify the ID or element object of the media tag, default value is the first video or audio element in the document tree.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("useDiskCache")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Use IndexedDB to cache data for VOD streaming.")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("diskCacheLimit")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('{"pc": 2500 * 1024 * 1024, "mobile": 1500 * 1024 * 1024}')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The max size of binary data that can be stored in the disk cache.")])])])]),t._v(" "),a("h2",{attrs:{id:"p2penginehls-properties-and-methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-properties-and-methods"}},[t._v("#")]),t._v(" P2pEngineHls Properties and Methods")]),t._v(" "),a("h3",{attrs:{id:"p2penginehls-version-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-version-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.version")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("Get the version of SDK.")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-protocolversion-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-protocolversion-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.protocolVersion")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("Get the version of P2P protocol.")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-hlsjsengine-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-hlsjsengine-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.HlsjsEngine (static)")])])]),t._v(" "),a("p",[t._v("Get the constructor of Hlsjs based P2pEngine.")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-serviceworkerengine-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-serviceworkerengine-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.ServiceWorkerEngine (static)")])])]),t._v(" "),a("p",[t._v("Get the constructor of ServiceWorker based P2pEngine.")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-getbrowser-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-getbrowser-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.getBrowser()")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("Get the name of the browser. The possible values are as follows:")]),t._v(" "),a("ul",[a("li",[t._v("Chrome")]),t._v(" "),a("li",[t._v("Firefox")]),t._v(" "),a("li",[t._v("Mac-Safari")]),t._v(" "),a("li",[t._v("iOS-Safari")]),t._v(" "),a("li",[t._v("X5")]),t._v(" "),a("li",[t._v("Unknown")])]),t._v(" "),a("h3",{attrs:{id:"p2penginehls-issupported-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-issupported-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.isSupported()")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("Returns true if both WebRTC Data Channel and one of MSE or SeviceWorker are supported.")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-ismsesupported-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-ismsesupported-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.isMSESupported() (static)")])])]),t._v(" "),a("p",[t._v("Returns true if MEDIA SOURCE EXTENSIONS(MSE) is supported by the browser.")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-isseviceworkersupported-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-isseviceworkersupported-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.isSeviceWorkerSupported() (static)")])])]),t._v(" "),a("p",[t._v("Returns true if ServiceWorker is supported by the browser.")]),t._v(" "),a("h3",{attrs:{id:"engine-realengine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-realengine"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.realEngine")])])]),t._v(" "),a("p",[t._v("Gets the currently working engine instance.")]),t._v(" "),a("h3",{attrs:{id:"engine-enginename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-enginename"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.engineName")])])]),t._v(" "),a("p",[t._v("Get the name of the currently working engine instance. The possible values are as follows:")]),t._v(" "),a("ul",[a("li",[t._v("HlsjsP2pEngine")]),t._v(" "),a("li",[t._v("HlsSwP2pEngine")])]),t._v(" "),a("h3",{attrs:{id:"engine-enablep2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-enablep2p"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.enableP2P()")])])]),t._v(" "),a("p",[t._v("Start p2p.")]),t._v(" "),a("h3",{attrs:{id:"engine-disablep2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-disablep2p"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.disableP2P()")])])]),t._v(" "),a("p",[t._v("Stop p2p, free used resources.")]),t._v(" "),a("h3",{attrs:{id:"engine-destroy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-destroy"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.destroy()")])])]),t._v(" "),a("p",[t._v("Stop p2p and free used resources.")]),t._v(" "),a("h3",{attrs:{id:"engine-registerserviceworker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-registerserviceworker"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.registerServiceWorker()")])])]),t._v(" "),a("p",[t._v("Register ServiceWorker and return a promise.")]),t._v(" "),a("h3",{attrs:{id:"engine-unregisterserviceworker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-unregisterserviceworker"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.unregisterServiceWorker()")])])]),t._v(" "),a("p",[t._v("Unregister ServiceWorker and return a promise.")]),t._v(" "),a("h2",{attrs:{id:"p2penginehls-events"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-events"}},[t._v("#")]),t._v(" P2pEngineHls Events")]),t._v(" "),a("h4",{attrs:{id:"engine-on-peerid-function-peerid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peerid-function-peerid"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('peerId', function (peerId) {})")])])]),t._v(" "),a("p",[t._v("Emitted when the peer Id of this client is obtained from server.")]),t._v(" "),a("h4",{attrs:{id:"engine-on-peers-function-peers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peers-function-peers"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('peers', function (peers) {})")])])]),t._v(" "),a("p",[t._v("Emitted when successfully connected with new peer.")]),t._v(" "),a("h4",{attrs:{id:"engine-on-stats-function-stats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-stats-function-stats"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('stats', function (stats) {})")])])]),t._v(" "),a("p",[t._v("Emitted when data is downloaded/uploaded."),a("br"),t._v("\nstats.totalHTTPDownloaded: total data downloaded by HTTP(KB)."),a("br"),t._v("\nstats.totalP2PDownloaded: total data downloaded by P2P(KB)."),a("br"),t._v("\nstats.totalP2PUploaded: total data uploaded by P2P(KB)."),a("br"),t._v("\nstats.p2pDownloadSpeed: p2p download speed(KB/s).")]),t._v(" "),a("h3",{attrs:{id:"engine-on-serverconnected-function-connected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-serverconnected-function-connected"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('serverConnected', function (connected) {})")])])]),t._v(" "),a("p",[t._v("Emitted when websocket is opened/closed.")]),t._v(" "),a("h3",{attrs:{id:"engine-on-exception-function-e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-exception-function-e"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('exception', function (e) {})")])])]),t._v(" "),a("p",[t._v("Emitted when exception occured."),a("br"),t._v("\ne.code: Exception identifierï¼ˆTRACKER_EXPT SIGNAL_EXPTï¼‰"),a("br"),t._v("\ne.message: Exception message "),a("br"),t._v("\ne.stack: Exception stack "),a("br")]),t._v(" "),a("h3",{attrs:{id:"get-p2p-information-from-p2pconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-p2p-information-from-p2pconfig"}},[t._v("#")]),t._v(" Get p2p information from p2pConfig")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getStats")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("totalP2PDownloaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalP2PUploaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalHTTPDownloaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2pDownloadSpeed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get the downloading statistics")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeerId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peerId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get peer Id")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeersInfo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get peers information")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"new-api-for-hls-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-api-for-hls-js"}},[t._v("#")]),t._v(" New API for Hls.js")]),t._v(" "),a("h3",{attrs:{id:"hls-engineversion-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-engineversion-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("Hls.engineVersion")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("Show the current version of SDK.")]),t._v(" "),a("h3",{attrs:{id:"hls-webrtc-support-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-webrtc-support-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("Hls.WEBRTC_SUPPORT")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("Is WebRTC natively supported in the environment?")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WEBRTC_SUPPORT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WebRTC is supported")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use a fallback")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"hls-p2pengine-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-p2pengine-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("Hls.P2pEngine")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("Get P2pEngineHls class from Hls, which is equivalent to the directly introduced P2pEngineHls.")]),t._v(" "),a("h2",{attrs:{id:"create-hls-instance"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#create-hls-instance"}},[t._v("#")]),t._v(" Create Hls Instance")]),t._v(" "),a("h3",{attrs:{id:"var-hls-new-hls-p2pconfig-opts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-hls-new-hls-p2pconfig-opts"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("var hls = new Hls({p2pConfig: [opts]});")])])]),t._v(" "),a("p",[t._v("Create a new "),a("em",[a("strong",[t._v("Hls")])]),t._v(" instance, where p2pConfig is equivalent to the p2pConfig passed to P2pEngineHls. At this time, there is no need to specify hlsjsInstance.")]),t._v(" "),a("h3",{attrs:{id:"hls-p2pengine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-p2pengine"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("hls.p2pEngine")])])]),t._v(" "),a("p",[t._v("Get the instance of "),a("em",[a("strong",[t._v("P2pEngineHls")])]),t._v(" from "),a("em",[a("strong",[t._v("Hls")])]),t._v(" .")]),t._v(" "),a("h2",{attrs:{id:"hlsproxy-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hlsproxy-api"}},[t._v("#")]),t._v(" HlsProxy API")]),t._v(" "),a("h4",{attrs:{id:"new-hlsproxy-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-hlsproxy-config"}},[t._v("#")]),t._v(" new HlsProxy(config);")]),t._v(" "),a("p",[t._v("Create a new "),a("em",[a("strong",[t._v("HlsProxy")])]),t._v(" instance.")]),t._v(" "),a("p",[t._v("If "),a("em",[a("strong",[t._v("config")])]),t._v(" is specified, then the default options (shown below) will be overridden.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Field")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Type")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Default")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("httpHeadersForPlaylist")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("function(url, headers, originalHeaders)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Set http headers for m3u8 request, for example, httpHeadersForPlaylist: (url, headers) => { headers.set('token', 'xxx') }")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("httpHeadersForMediaFile")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("function(url, headers, originalHeaders)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Set http headers for ts request, for example, httpHeadersForMediaFile: (url, headers) => { headers.set('token', 'xxx') }")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("insertTimeOffsetTag")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('Insert "#ext-x-start: time-offset = [playlistOffset]" in m3u8 file to force the player to start loading from the first ts of playlist, only works on live mode')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("playlistOffset")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("0.01")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("The offset in seconds to start playing the video. If the value is negative, specifies the time from the end of the playlist. The offset must not be larger than the playlist duration, only works when insertTimeOffsetTag is true")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("allowedMediaFiles")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Array")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("['ts', 'mp4', 'm4s', 'fmp4']")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Additional media file extension (eg. ['txt', 'png']) that need to be intercepted")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("allowedPlaylistSuffix")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Array")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("['m3u8']")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Additional playlist file extension (eg. ['txt']) that need to be intercepted")])])])]),t._v(" "),a("h4",{attrs:{id:"hlsproxy-version-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hlsproxy-version-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("HlsProxy.version")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("Get the version of HlsProxy.")]),t._v(" "),a("h2",{attrs:{id:"advanced-usage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#advanced-usage"}},[t._v("#")]),t._v(" Advanced Usage")]),t._v(" "),a("h3",{attrs:{id:"dynamic-m3u8-path-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-m3u8-path-support"}},[t._v("#")]),t._v(" Dynamic M3u8 Path Support")]),t._v(" "),a("p",[t._v("The channelId is an identifier used by our backend to match peers that are watching the same content. It is an optional parameter, and by default, we generate channelId from the content URL by removing any query parameters and protocol from it.\nSome m3u8 urls play the same live/vod but have different paths on them. For example, example.com/clientId1/streamId.m3u8 and example.com/clientId2/streamId.m3u8. In this case, you can format a common channelId for them.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Set token in p2pConfig before setting channelId! Connectivity with other platform should have the same token and channelId.")]),t._v("\np2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3u8Url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extractVideoIdFromUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m3u8Url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// make a channelId by removing the different part which is defined by yourself")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// channelId: VIDEO_ID       // for fixed channel id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Let's say your m3u8 is http://example.com/token123456/video1/playlist.m3u8, in which token123456 is the token varied by users, video1 is the ID of the video.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3u8Url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3u8Url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" videoId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The following is an example of the client behaviour with this channelId configured:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!-- URL to be replaced --\x3e\nhttp://example.com/token123456/video1/playlist.m3u8\n\n\x3c!-- Resulting channelId --\x3e\nvideo1/playlist.m3u8\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",[t._v("Interconnect with other platform should ensure that both have the same token and channelId.")])]),t._v(" "),a("h3",{attrs:{id:"p2p-first-strategy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2p-first-strategy"}},[t._v("#")]),t._v(" P2P First Strategy")]),t._v(" "),a("p",[t._v("Since it takes time to establish a P2P connection, the first few pieces are downloaded using HTTP by default. Giving the peers extra time to download initial segments will increase the p2p ratio. However, it may cause delay. It is recommended to turn on the hot channel.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    waitForPeer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    waitForPeerTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Http will be forcibly enabled if there is no peers on tracker or waitForPeerTimeout is timed out")]),t._v("\n    sourceUrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("M3U8_URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the url of m3u8, like 'http://xxx.m3u8'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"allow-http-range-request"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#allow-http-range-request"}},[t._v("#")]),t._v(" Allow Http Range Request")]),t._v(" "),a("p",[t._v("If http range request is activated, we are able to get chunks of data from peer and then complete the segments by getting other chunks from the CDN, thus, reducing your CDN bandwidth. To activate range requests, See "),a("RouterLink",{attrs:{to:"/en/views/optimization.html#allow-http-range-request"}},[t._v("Allow Http Range Request")]),t._v(". Besides, the code below is neededï¼š")],1),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    useHttpRange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"bypass-user-specific-segments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bypass-user-specific-segments"}},[t._v("#")]),t._v(" Bypass User-specific Segments")]),t._v(" "),a("p",[t._v("Sometimes we don't want some ts files to be shared, such as user-specific ts generated by SSAI (Server Side Ad Insertion). At this time, we can use the segmentBypass function to bypass it:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("segmentBypass")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSSAISegment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"use-your-own-stun-or-turn-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#use-your-own-stun-or-turn-server"}},[t._v("#")]),t._v(" Use Your Own STUN or TURN Server")]),t._v(" "),a("p",[t._v("STUN (Session Traversal Utilities for NAT) allows clients to discover their public IP address and the type of NAT they are behind. This information is used to establish the media connection. Although there are default STUN servers in this SDK, you can replace them with your own via P2PConfig. TURN (Traversal Using Relays around NAT) server is used to relay traffic if direct connection fails. You can config your "),a("a",{attrs:{href:"https://github.com/coturn/coturn",target:"_blank",rel:"noopener noreferrer"}},[t._v("TURN"),a("OutboundLink")],1),t._v(" server in the same way as STUN.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    webRTCConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       iceServers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" urls"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_STUN_OR_TURN_SERVER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"how-to-check-segment-validity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-check-segment-validity"}},[t._v("#")]),t._v(" How to Check Segment Validity")]),t._v(" "),a("p",[t._v("Sometimes we need to prevent a peer from sending a fake segment\n(such as the bittorrent with a hash function).\nCDNBye provides a validation callback with buffer of the\ndownloaded segment, developer should implement the actual\nvalidator. For example, you can create a program that generates\nhashes for the segments and stores them in a specific file or\ninjects into m3u8 playlist files the hashes information. If\nthe callback returns false, then the segment is not valid.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("validateSegment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hashFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);