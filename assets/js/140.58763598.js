(window.webpackJsonp=window.webpackJsonp||[]).push([[140],{698:function(t,e,a){"use strict";a.r(e);var r=a(1),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("div",{staticClass:"custom-block tip"},[a("p",[t._v("P2P streaming SDK for all browsers(iOS Safari included) and web players, with the help of ServiceWorker and WebRTC.")])]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.npmjs.com/package/swarmcloud-hls-sw"}},[a("img",{attrs:{src:"https://img.shields.io/npm/v/swarmcloud-hls-sw.svg?style=flat",alt:"npm"}})]),t._v(" "),a("a",{attrs:{href:"https://www.jsdelivr.com/package/npm/swarmcloud-hls-sw"}},[a("img",{attrs:{src:"https://data.jsdelivr.com/v1/package/npm/swarmcloud-hls-sw/badge",alt:"jsdelivr"}})])]),t._v(" "),a("p",[t._v("WebRTC has been supported by iOS and Safari since 2017, but MEDIA SOURCE EXTENSIONS still cannot be used. These extensions are indispensable for integrating the P2P client of browser-based eCDN solutions.\n"),a("br"),t._v("\nWithout the MEDIA SOURCE EXTENSIONS, it appears that no user data can be intercepted at the XHR object or the fetch API, and creating a cluster for peer-to-peer streaming is almost impossible. Luckily there is another way to intercept HTTP traffic while streaming on an iOS device. Even if iOS restricts the possibilities to make adjustments in the browser’s background to make it perfectly cooperating with your own coding and software, there is a way iOS allows developers to insert some web applications inside of Safari. This standard is called “ServiceWorker”.\n"),a("br"),t._v("\nThis SDK creates a communal, distributed CDN with the latest HTML5 APIs — WebRTC to connect browsers, ServiceWorker to fulfill requests. As you might expect, it supports all modern browsers and all web players.")]),t._v(" "),a("h3",{attrs:{id:"browser-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#browser-support"}},[t._v("#")]),t._v(" Browser Support")]),t._v(" "),a("p",[t._v("WebRTC has already been incorporated into the HTML5 standard and it is broadly deployed in modern browsers. The compatibility of SwarmCloud depends on the browser support of WebRTC and Service Worker.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("Compatibility")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Chrome")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Firefox")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("macOS Safari")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Opera")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("Edge")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("iOS Safari")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("IE")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("WebRTC Datachannel")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("Service Worker")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("SwarmCloud")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("✔")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("❌")])])])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",[t._v("On the Android devices, Service Worker cannot intercept media files when playing HLS by video tag directly. Therefore, MSE-based player such as hls.js is required to make this SDK work normally")])]),t._v(" "),a("h3",{attrs:{id:"how-does-it-work"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-does-it-work"}},[t._v("#")]),t._v(" How does it Work?")]),t._v(" "),a("ul",[a("li",[t._v("The SwarmCloud SDK embeds a local proxy server between the player and the origin to intercept content requests")]),t._v(" "),a("li",[t._v("The player starts streaming content through the proxy.")]),t._v(" "),a("li",[t._v("The local proxy(ServiceWorker) waits for network requests of HLS (like, say, https://yourwebsite.com/a.ts) by listening for network fetch events, then forward the request to main thread")])]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("self"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("addEventListener")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fetch'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ⛦ magic here ⛦ */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ul",[a("li",[t._v("The main thread decides whether to download from the peer according to the P2P network situation. After downloading, the main thread save a copy to share with other nodes")]),t._v(" "),a("li",[t._v("After an asset is cached, every device watches for future requests for that asset and automatically retrieves it from peer-to-peer network instead of the more expensive, slower origin server (over WebRTC instead of HTTP).")]),t._v(" "),a("li",[t._v("If no peers or p2p failed, the request fall through Service Worker unmodified and are fetched from the origin server")])]),t._v(" "),a("h3",{attrs:{id:"online-demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#online-demo"}},[t._v("#")]),t._v(" Online Demo")]),t._v(" "),a("p",[t._v("(https://demo.cdnbye.com/?ios=true)[https://demo.cdnbye.com/?ios=true]")]),t._v(" "),a("h3",{attrs:{id:"limitations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#limitations"}},[t._v("#")]),t._v(" Limitations")]),t._v(" "),a("ul",[a("li",[t._v("Only work on https website")]),t._v(" "),a("li",[t._v("Need to host our web SDK(sw.js) on your own servers instead of getting it from our public cloud")]),t._v(" "),a("li",[t._v("LL-HLS is not supported currently")])])])}),[],!1,null,null,null);e.default=s.exports}}]);