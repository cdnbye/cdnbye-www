(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{829:function(t,e,a){"use strict";a.r(e);var s=a(1),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"p2penginehls-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-api"}},[t._v("#")]),t._v(" P2pEngineHls API")]),t._v(" "),a("h3",{attrs:{id:"var-engine-new-p2penginehls-p2pconfig"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-engine-new-p2penginehls-p2pconfig"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("var engine = new P2pEngineHls(p2pConfig);")])])]),t._v(" "),a("p",[t._v("实例化 "),a("em",[a("strong",[t._v("P2pEngineHls")])]),t._v("。")]),t._v(" "),a("p",[t._v("如果指定了 "),a("em",[a("strong",[t._v("p2pConfig")])]),t._v(" ，那么对应的默认值将会被覆盖。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("hlsjsInstance")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Hlsjs")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Hlsjs的实例化对象，如果没有传入则不会启用基于 Hlsjs 的引擎。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("proxyOnly")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否强制启用基于 ServiceWorker 的引擎。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("logLevel")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string|boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'error'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("log的等级，分为'warn'、'error'、'none'，设为true等于'warn'，设为false等于'none'。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("token")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[a("RouterLink",{attrs:{to:"/cn/views/bindings.html"}},[t._v("token")]),t._v("用于控制台多域名数据汇总展示，另外如果自定义channelId也需要设置token。")],1)]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("live")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("设置直播或者点播模式，不同模式会自动设置不同的hls.js参数。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("announce")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'https://cn.cdnbye.com/v1'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("tracker服务器地址。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("trackerZone")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'cn'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("tracker服务器地址的国家代号，分为'cn'、'hk'、'us'。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("memoryCacheLimit")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('{"pc": 600 * 1024 * 1024, "mobile": 300 * 1024 * 1024}')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("内存缓存的最大数据量，分为PC和mobile。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("p2pEnabled")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否开启P2P。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("webRTCConfig")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("{}")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("用于配置stun和datachannel的"),a("a",{attrs:{href:"https://github.com/feross/simple-peer",target:"_blank",rel:"noopener noreferrer"}},[t._v("字典"),a("OutboundLink")],1),t._v("。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("useHttpRange")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("在可能的情况下使用Http Range请求来补足p2p下载超时的剩余部分数据。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("httpLoadTime")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("number")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("3.0")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("P2P下载超时后留给HTTP下载的时间。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("sharePlaylist")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否允许m3u8文件的P2P传输。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("strictSegmentId")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("使用基于url的SegmentId，替代默认基于序列号的。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("geoIpPreflight")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("向在线IP数据库请求ASN等信息，从而获得更准确的调度，会延迟P2P启动时间。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("swAutoRegister")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("是否在初始化基于 ServiceWorker 的引擎后自动注册 ServiceWorker 。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("swFile")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'./sw.js'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ServiceWorker文件名和路径。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("swScope")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("'./'")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("ServiceWorker默认作用域是当前目录以及所有子目录，因此如果将 sw.js 放在网站根目录，那么所有网站请求都在 ServiceWorker 控制范围内。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("mediaElem")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("HTMLMediaElement|string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("指定media标签的id或者Element对象，默认是document中的第一个video或audio元素。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("useDiskCache")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("点播模式用 IndexedDB 存储数据。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[a("em",[a("strong",[t._v("diskCacheLimit")])])]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v('{"pc": 2500 * 1024 * 1024, "mobile": 1500 * 1024 * 1024}')]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("磁盘缓存的最大数据量，分为PC和mobile。")])])])]),t._v(" "),a("h2",{attrs:{id:"p2penginehls-属性和方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-属性和方法"}},[t._v("#")]),t._v(" P2pEngineHls 属性和方法")]),t._v(" "),a("h3",{attrs:{id:"p2penginehls-version-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-version-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.version")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("获取 "),a("em",[a("strong",[t._v("SDK")])]),t._v(" 的版本号。")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-protocolversion-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-protocolversion-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.protocolVersion")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("获取 P2P 协议的版本号，与其他平台互通的前提是 P2P 协议版本号相同。")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-hlsjsengine-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-hlsjsengine-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.HlsjsEngine (static)")])])]),t._v(" "),a("p",[t._v("获取基于 Hlsjs 的 P2pEngine 的构造函数。")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-serviceworkerengine-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-serviceworkerengine-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.ServiceWorkerEngine (static)")])])]),t._v(" "),a("p",[t._v("获取基于 ServiceWorker 的 P2pEngine 的构造函数。")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-getbrowser-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-getbrowser-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.getBrowser()")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("获取浏览器的名称，可能取值如下：")]),t._v(" "),a("ul",[a("li",[t._v("Chrome")]),t._v(" "),a("li",[t._v("Firefox")]),t._v(" "),a("li",[t._v("Mac-Safari")]),t._v(" "),a("li",[t._v("iOS-Safari")]),t._v(" "),a("li",[t._v("X5")]),t._v(" "),a("li",[t._v("Unknown")])]),t._v(" "),a("h3",{attrs:{id:"p2penginehls-issupported-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-issupported-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.isSupported()")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("判断当前浏览器是否支持WebRTC data channel ，以及 MSE 或者 SeviceWorker 其中之一。")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-ismsesupported-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-ismsesupported-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.isMSESupported() (static)")])])]),t._v(" "),a("p",[t._v("判断当前浏览器是否支持 MEDIA SOURCE EXTENSIONS 。")]),t._v(" "),a("h4",{attrs:{id:"p2penginehls-isserviceworkersupported-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls-isserviceworkersupported-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("P2pEngineHls.isServiceWorkerSupported() (static)")])])]),t._v(" "),a("p",[t._v("判断当前浏览器是否支持 ServiceWorker 。")]),t._v(" "),a("h3",{attrs:{id:"engine-realengine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-realengine"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.realEngine")])])]),t._v(" "),a("p",[t._v("获取目前启用的内部引擎实例。")]),t._v(" "),a("h3",{attrs:{id:"engine-enginename"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-enginename"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.engineName")])])]),t._v(" "),a("p",[t._v("获取目前启用的内部引擎的名称，可能取值如下：")]),t._v(" "),a("ul",[a("li",[t._v("HlsjsP2pEngine")]),t._v(" "),a("li",[t._v("HlsSwP2pEngine")])]),t._v(" "),a("h3",{attrs:{id:"engine-enablep2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-enablep2p"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.enableP2P()")])])]),t._v(" "),a("p",[t._v("在p2p暂停或未启动情况下启动p2p。")]),t._v(" "),a("h3",{attrs:{id:"engine-disablep2p"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-disablep2p"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.disableP2P()")])])]),t._v(" "),a("p",[t._v("停止p2p并释放内存。")]),t._v(" "),a("h3",{attrs:{id:"engine-destroy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-destroy"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.destroy()")])])]),t._v(" "),a("p",[t._v("停止p2p、销毁engine并释放内存。在Hls.js销毁时会自动调用。")]),t._v(" "),a("h3",{attrs:{id:"engine-registerserviceworker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-registerserviceworker"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.registerServiceWorker()")])])]),t._v(" "),a("p",[t._v("注册 ServiceWorker 并返回一个 promise 。")]),t._v(" "),a("h3",{attrs:{id:"engine-unregisterserviceworker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-unregisterserviceworker"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.unregisterServiceWorker()")])])]),t._v(" "),a("p",[t._v("销毁 ServiceWorker 并返回一个 promise 。")]),t._v(" "),a("h2",{attrs:{id:"p2penginehls事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2penginehls事件"}},[t._v("#")]),t._v(" P2pEngineHls事件")]),t._v(" "),a("h3",{attrs:{id:"engine-on-peerid-function-peerid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peerid-function-peerid"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('peerId', function (peerId) {})")])])]),t._v(" "),a("p",[t._v("当从服务端获取到peerId时回调该事件。")]),t._v(" "),a("h3",{attrs:{id:"engine-on-peers-function-peers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peers-function-peers"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('peers', function (peers) {})")])])]),t._v(" "),a("p",[t._v("当与新的节点成功建立p2p连接时回调该事件。")]),t._v(" "),a("h3",{attrs:{id:"engine-on-stats-function-stats"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-stats-function-stats"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('stats', function (stats) {})")])])]),t._v(" "),a("p",[t._v("该回调函数可以获取p2p信息，包括："),a("br"),t._v("\nstats.totalHTTPDownloaded: 从HTTP(CDN)下载的数据量（单位KB）"),a("br"),t._v("\nstats.totalP2PDownloaded: 从P2P下载的数据量（单位KB）"),a("br"),t._v("\nstats.totalP2PUploaded: P2P上传的数据量（单位KB）"),a("br"),t._v("\nstats.p2pDownloadSpeed: P2P下载速度（单位KB/s）")]),t._v(" "),a("h3",{attrs:{id:"engine-on-serverconnected-function-connected"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-serverconnected-function-connected"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('serverConnected', function (connected) {})")])])]),t._v(" "),a("p",[t._v("当连接/断开websocket时回调该事件。")]),t._v(" "),a("h3",{attrs:{id:"engine-on-exception-function-e"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-exception-function-e"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("engine.on('exception', function (e) {})")])])]),t._v(" "),a("p",[t._v("该回调函数可以获取SDK的异常信息，包括："),a("br"),t._v("\ne.code: 异常标识（TRACKER_EXPT SIGNAL_EXPT  HLSJS_EXPT）"),a("br"),t._v("\ne.message: 异常信息 "),a("br"),t._v("\ne.stack: 异常堆栈信息 "),a("br")]),t._v(" "),a("h3",{attrs:{id:"通过p2pconfig获取p2p信息"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#通过p2pconfig获取p2p信息"}},[t._v("#")]),t._v(" 通过p2pConfig获取p2p信息")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getStats")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("totalP2PDownloaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalP2PUploaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalHTTPDownloaded"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2pDownloadSpeed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取p2p下载信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeerId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peerId")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取本节点的Id")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeersInfo")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peers")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取成功连接的节点的信息")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"在hls-js增加的新api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#在hls-js增加的新api"}},[t._v("#")]),t._v(" 在Hls.js增加的新API")]),t._v(" "),a("h3",{attrs:{id:"hls-engineversion-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-engineversion-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("Hls.engineVersion")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("当前插件的版本号")]),t._v(" "),a("h3",{attrs:{id:"hls-webrtc-support-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-webrtc-support-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("Hls.WEBRTC_SUPPORT")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("判断当前浏览器是否支持WebRTC")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WEBRTC_SUPPORT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WebRTC is supported")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use a fallback")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"hls-p2pengine-static-method"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-p2pengine-static-method"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("Hls.P2pEngine")])]),t._v(" (static method)")]),t._v(" "),a("p",[t._v("从Hls获取 P2pEngine ，等价于直接引入的 P2pEngineHls")]),t._v(" "),a("h2",{attrs:{id:"实例化与参数配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实例化与参数配置"}},[t._v("#")]),t._v(" 实例化与参数配置")]),t._v(" "),a("h3",{attrs:{id:"var-hls-new-hls-p2pconfig-opts"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-hls-new-hls-p2pconfig-opts"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("var hls = new Hls({p2pConfig: [opts]});")])])]),t._v(" "),a("p",[t._v("创建一个新的"),a("code",[t._v("Hls")]),t._v("实例。其中 p2pConfig 等价于传入 P2pEngineHls 的 p2pConfig ，此时无需再指定 hlsjsInstance")]),t._v(" "),a("h3",{attrs:{id:"hls-p2pengine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hls-p2pengine"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("hls.p2pEngine")])])]),t._v(" "),a("p",[t._v("从 "),a("em",[a("strong",[t._v("Hls")])]),t._v(" 实例中获取 "),a("em",[a("strong",[t._v("P2pEngineHls")])]),t._v(" 实例。")]),t._v(" "),a("h2",{attrs:{id:"hlsproxy-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hlsproxy-api"}},[t._v("#")]),t._v(" HlsProxy API")]),t._v(" "),a("h4",{attrs:{id:"new-hlsproxy-config"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-hlsproxy-config"}},[t._v("#")]),t._v(" new HlsProxy(config);")]),t._v(" "),a("p",[t._v("创建一个 "),a("em",[a("strong",[t._v("HlsProxy")])]),t._v(" 实例。")]),t._v(" "),a("p",[t._v("如果指定了 "),a("em",[a("strong",[t._v("config")])]),t._v(" ，那么对应的默认值将会被覆盖。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("httpHeadersForPlaylist")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("function(url, headers)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("设置m3u8请求的自定义http头，如：httpHeadersForPlaylist: (url, headers) => { headers.set('token', 'xxx') }")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("httpHeadersForMediaFile")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("function(url, headers)")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("null")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("设置ts请求的自定义http头，如：httpHeadersForMediaFile: (url, headers) => { headers.set('token', 'xxx') }")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("insertTimeOffsetTag")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("仅在直播模式生效，在m3u8文件中插入 "),a("em",[a("strong",[t._v("#EXT-X-START:TIME-OFFSET=0.01")])]),t._v(" ，强制播放器从m3u8的第一个ts开始加载")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("allowedMediaFiles")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("Array")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("需要支持的额外的媒体文件后缀，如 ['txt', 'png']")])])])]),t._v(" "),a("h4",{attrs:{id:"hlsproxy-version-static"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hlsproxy-version-static"}},[t._v("#")]),t._v(" "),a("em",[a("strong",[t._v("HlsProxy.version")])]),t._v(" (static)")]),t._v(" "),a("p",[t._v("获取 HlsProxy 的版本号。")]),t._v(" "),a("h2",{attrs:{id:"高级用法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高级用法"}},[t._v("#")]),t._v(" 高级用法")]),t._v(" "),a("h3",{attrs:{id:"解决动态m3u8路径问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解决动态m3u8路径问题"}},[t._v("#")]),t._v(" 解决动态m3u8路径问题")]),t._v(" "),a("p",[t._v("某些流媒体提供商的m3u8是动态生成的，不同节点的m3u8地址不一样，例如example.com/clientId1/streamId.m3u8和example.com/clientId2/streamId.m3u8，而本插件默认使用m3u8地址(去掉查询参数)作为channelId。这时候就要构造一个共同的chanelId，使实际观看同一直播/视频的节点处在相同频道中。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须先在 p2pConfig 设置 token ，才能自定义 channelId ! 与其他平台互通需要相同的 token 和 channelId 。")]),t._v("\np2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3u8Url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("extractVideoIdFromUrl")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m3u8Url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略差异部分，构造一个一致的channelId，其中 extractVideoIdFromUrl 需要自己定义，可以抽取url中的视频ID作为结果返回")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// channelId: VIDEO_ID       // for fixed channel id")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("用 http://example.com/token123456/video1/playlist.m3u8 来举例, 其中 token123456 是根据不同用户产生的token，video1 是视频的唯一ID。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3u8Url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3u8Url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" videoId "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("按如上配置后，结果如下，token被去掉，只保留video ID：")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("\x3c!-- URL to be replaced --\x3e\nhttp://example.com/token123456/video1/playlist.m3u8\n\n\x3c!-- Resulting channelId --\x3e\nvideo1/playlist.m3u8\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",[t._v("如果要与其他平台互通，则必须确保两者拥有相同的 token 和 channelId 。")])]),t._v(" "),a("h3",{attrs:{id:"p2p优先策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#p2p优先策略"}},[t._v("#")]),t._v(" P2P优先策略")]),t._v(" "),a("p",[t._v("由于建立P2P连接需要时间，默认情况下前几片用HTTP下载。可以通过配置参数，等待P2P建立连接后优先用P2P下载，从而提升P2P效果，但可能会带来延时，建议在热度比较大的频道开启。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    waitForPeer"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    waitForPeerTimeout"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以根据具体场景设置超时时间")]),t._v("\n    sourceUrl"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("M3U8_URL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("         "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// m3u8地址， 如：'http://xxx.m3u8'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),t._v(" "),a("h3",{attrs:{id:"允许http-range请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#允许http-range请求"}},[t._v("#")]),t._v(" 允许Http Range请求")]),t._v(" "),a("p",[t._v("当对等端上行带宽不够时，可能导致p2p传输超时而转向http下载，原本p2p下载的数据无法复用。Http Range请求用于补足p2p下载超时的剩余部分数据，要开启Http Range，首先需要源服务器支持，请参考"),a("RouterLink",{attrs:{to:"/cn/views/optimization.html#允许http-range请求"}},[t._v("允许Http Range请求")]),t._v("，然后增加以下配置：")],1),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    useHttpRange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"屏蔽某些特殊的切片文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#屏蔽某些特殊的切片文件"}},[t._v("#")]),t._v(" 屏蔽某些特殊的切片文件")]),t._v(" "),a("p",[t._v("某些情况下我们不想让某些切片文件参与P2P，比如SSAI(Server Side Ad Insertion)产生的特定于用户的切片，这个时候可以利用 segmentBypass 这个函数来进行过滤：")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("segmentBypass")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tags")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("isSSAISegment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"自行配置-stun-和-turn-服务器地址"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自行配置-stun-和-turn-服务器地址"}},[t._v("#")]),t._v(" 自行配置 STUN 和 TURN 服务器地址")]),t._v(" "),a("p",[t._v("STUN用于p2p连接过程中获取公网IP地址，TURN则可以在p2p连接不通时用于中转数据。本SDK已内置公开的STUN服务，开发者可以通过P2pConfig来更换STUN地址。TURN服务器则需要开发者自行搭建，可以参考"),a("a",{attrs:{href:"https://github.com/coturn/coturn",target:"_blank",rel:"noopener noreferrer"}},[t._v("coturn"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    webRTCConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       iceServers"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n           "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" urls"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_STUN_OR_TURN_SERVER")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"切片hash校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#切片hash校验"}},[t._v("#")]),t._v(" 切片Hash校验")]),t._v(" "),a("p",[t._v("有时候我们需要校验从节点下载的切片的合法性（类似bittorrent的哈希校验）。\nSDK提供了一个钩子函数，可以回调下载的切片供开发者进行校验。用于校验的\n哈希表建议直接从服务器下载，开发者可以通过程序计算每个ts文件的哈希并存储于\n特定的文件中或者直接嵌入到m3u8文件中。如果校验失败，直接在回调函数中\n返回false即可。")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("p2pConfig"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("validateSegment")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hashFile"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hash "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);