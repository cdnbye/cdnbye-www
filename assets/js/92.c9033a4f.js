(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{868:function(t,a,e){"use strict";e.r(a);var s=e(1),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[t._v("#")]),t._v(" 简介")]),t._v(" "),e("p",[t._v("CDNBye通过WebRTC datachannel技术和BT算法，在观看同一视频/直播的用户之间构建P2P网络，在节省带宽成本的同时，提升用户的播放体验。")]),t._v(" "),e("p",[t._v("采用本插件的前提是浏览器支持WebRTC (Chrome, Firefox, Opera, Safari)。")]),t._v(" "),e("h2",{attrs:{id:"在hls-js增加的新api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#在hls-js增加的新api"}},[t._v("#")]),t._v(" 在Hls.js增加的新API")]),t._v(" "),e("h3",{attrs:{id:"hls-engineversion-static-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hls-engineversion-static-method"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("Hls.engineVersion")])]),t._v(" (static method)")]),t._v(" "),e("p",[t._v("当前插件的版本号")]),t._v(" "),e("h3",{attrs:{id:"hls-webrtc-support-static-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#hls-webrtc-support-static-method"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("Hls.WEBRTC_SUPPORT")])]),t._v(" (static method)")]),t._v(" "),e("p",[t._v("判断当前浏览器是否支持WebRTC")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Hls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("WEBRTC_SUPPORT")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// WebRTC is supported")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Use a fallback")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"实例化与参数配置"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实例化与参数配置"}},[t._v("#")]),t._v(" 实例化与参数配置")]),t._v(" "),e("h3",{attrs:{id:"var-hls-new-hls-p2pconfig-opts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-hls-new-hls-p2pconfig-opts"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("var hls = new Hls({p2pConfig: [opts]});")])])]),t._v(" "),e("p",[t._v("创建一个新的"),e("code",[t._v("Hls")]),t._v("实例。")]),t._v(" "),e("h3",{attrs:{id:"var-engine-hls-p2pengine"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-engine-hls-p2pengine"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("var engine = hls.p2pEngine;")])])]),t._v(" "),e("p",[t._v("从 "),e("em",[e("strong",[t._v("Hls")])]),t._v(" 实例中获取 "),e("em",[e("strong",[t._v("P2PEngine")])]),t._v(" 实例。")]),t._v(" "),e("p",[t._v("如果指定了 "),e("em",[e("strong",[t._v("opts")])]),t._v(" ，那么对应的默认值将会被覆盖。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"center"}},[t._v("字段")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("类型")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("默认值")]),t._v(" "),e("th",{staticStyle:{"text-align":"center"}},[t._v("描述")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("logLevel")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("string|boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'error'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("log的等级，分为'warn'、'error'、'none'，设为true等于'warn'，设为false等于'none'。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("token")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("undefined")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[e("RouterLink",{attrs:{to:"/cn/views/bindings.html"}},[t._v("token")]),t._v("用于控制台多域名数据汇总展示，另外如果自定义channelId也需要设置token。")],1)]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("live")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("设置直播或者点播模式，不同模式会自动设置不同的hls.js参数。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("trackerZone")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("string")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("'eu'")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("tracker服务器地址的国家代号，分为'eu'、'hk'、'us'。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("memoryCacheLimit")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v('{"pc": 400 * 1024 * 1024, "mobile": 100 * 1024 * 1024}')]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("p2p缓存的最大数据量，分为PC和mobile。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("p2pEnabled")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否开启P2P。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("webRTCConfig")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("Object")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("{}")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("用于配置stun和datachannel的"),e("a",{attrs:{href:"https://github.com/feross/simple-peer",target:"_blank",rel:"noopener noreferrer"}},[t._v("字典"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("useHttpRange")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("在可能的情况下使用Http Range请求来补足p2p下载超时的剩余部分数据。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("waitForPeer")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("优先尝试从对等端下载前几片数据，可以提高P2P比例，但可能会增加起播延时。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("waitForPeerTimeout")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("number")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("4.5")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("waitForPeer的超时时间(单位秒)，超时后恢复从http下载。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("httpLoadTime")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("number")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("2.0")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("P2P下载超时后留给HTTP下载的时间。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("sharePlaylist")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("false")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("是否允许m3u8文件的P2P传输。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"center"}},[e("em",[e("strong",[t._v("geoIpPreflight")])])]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("boolean")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("true")]),t._v(" "),e("td",{staticStyle:{"text-align":"center"}},[t._v("向在线IP数据库请求ASN等信息，从而获得更准确的调度，会延迟P2P启动时间。")])])])]),t._v(" "),e("h2",{attrs:{id:"p2pengine-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p2pengine-api"}},[t._v("#")]),t._v(" P2PEngine API")]),t._v(" "),e("h3",{attrs:{id:"p2pengine-version-static"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p2pengine-version-static"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("P2PEngine.version")])]),t._v(" (static)")]),t._v(" "),e("p",[t._v("获取 "),e("em",[e("strong",[t._v("P2PEngine")])]),t._v(" 的版本号。")]),t._v(" "),e("h4",{attrs:{id:"p2pengine-protocolversion-static"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p2pengine-protocolversion-static"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("P2PEngine.protocolVersion")])]),t._v(" (static)")]),t._v(" "),e("p",[t._v("获取 P2P 协议的版本号，与其他平台互通的前提是 P2P 协议版本号相同。")]),t._v(" "),e("h3",{attrs:{id:"p2pengine-issupported-static-method"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p2pengine-issupported-static-method"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("P2PEngine.isSupported()")])]),t._v(" (static method)")]),t._v(" "),e("p",[t._v("判断当前浏览器是否支持WebRTC data channel。")]),t._v(" "),e("h3",{attrs:{id:"var-engine-new-p2pengine-hlsjs-p2pconfig"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#var-engine-new-p2pengine-hlsjs-p2pconfig"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("var engine = new P2PEngine(hlsjs, p2pConfig);")])])]),t._v(" "),e("p",[t._v("实例化 "),e("em",[e("strong",[t._v("P2PEngine")])]),t._v("。也可以从 "),e("em",[e("strong",[t._v("Hls")])]),t._v(" 实例获取 "),e("em",[e("strong",[t._v("P2PEngine")])]),t._v(" 实例：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hls "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Hls")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" engine "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hls"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("p2pEngine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"engine-enablep2p"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-enablep2p"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.enableP2P()")])])]),t._v(" "),e("p",[t._v("在p2p暂停或未启动情况下启动p2p。")]),t._v(" "),e("h3",{attrs:{id:"engine-disablep2p"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-disablep2p"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.disableP2P()")])])]),t._v(" "),e("p",[t._v("停止p2p并释放内存。")]),t._v(" "),e("h3",{attrs:{id:"engine-destroy"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-destroy"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.destroy()")])])]),t._v(" "),e("p",[t._v("停止p2p、销毁engine并释放内存。在Hls.js销毁时会自动调用。")]),t._v(" "),e("h2",{attrs:{id:"p2pengine事件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p2pengine事件"}},[t._v("#")]),t._v(" P2PEngine事件")]),t._v(" "),e("h3",{attrs:{id:"engine-on-peerid-function-peerid"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peerid-function-peerid"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.on('peerId', function (peerId) {})")])])]),t._v(" "),e("p",[t._v("当从服务端获取到peerId时回调该事件。")]),t._v(" "),e("h3",{attrs:{id:"engine-on-peers-function-peers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-peers-function-peers"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.on('peers', function (peers) {})")])])]),t._v(" "),e("p",[t._v("当与新的节点成功建立p2p连接时回调该事件。")]),t._v(" "),e("h3",{attrs:{id:"engine-on-stats-function-stats"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-stats-function-stats"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.on('stats', function (stats) {})")])])]),t._v(" "),e("p",[t._v("该回调函数可以获取p2p信息，包括："),e("br"),t._v("\nstats.totalHTTPDownloaded: 从HTTP(CDN)下载的数据量（单位KB）"),e("br"),t._v("\nstats.totalP2PDownloaded: 从P2P下载的数据量（单位KB）"),e("br"),t._v("\nstats.totalP2PUploaded: P2P上传的数据量（单位KB）"),e("br"),t._v("\nstats.p2pDownloadSpeed: P2P下载速度（单位KB/s）")]),t._v(" "),e("h3",{attrs:{id:"engine-on-serverconnected-function-connected"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-serverconnected-function-connected"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.on('serverConnected', function (connected) {})")])])]),t._v(" "),e("p",[t._v("当连接/断开websocket时回调该事件。")]),t._v(" "),e("h3",{attrs:{id:"engine-on-exception-function-e"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#engine-on-exception-function-e"}},[t._v("#")]),t._v(" "),e("em",[e("strong",[t._v("engine.on('exception', function (e) {})")])])]),t._v(" "),e("p",[t._v("该回调函数可以获取SDK的异常信息，包括："),e("br"),t._v("\ne.code: 异常标识（TRACKER_EXPT SIGNAL_EXPT  HLSJS_EXPT）"),e("br"),t._v("\ne.message: 异常信息 "),e("br"),t._v("\ne.stack: 异常堆栈信息 "),e("br")]),t._v(" "),e("h3",{attrs:{id:"通过p2pconfig获取p2p信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#通过p2pconfig获取p2p信息"}},[t._v("#")]),t._v(" 通过p2pConfig获取p2p信息")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getStats")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("totalP2PDownloaded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalP2PUploaded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" totalHTTPDownloaded"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" p2pDownloadSpeed")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取p2p下载信息")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeerId")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peerId")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取本节点的Id")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getPeersInfo")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("peers")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取成功连接的节点的信息")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"高级用法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#高级用法"}},[t._v("#")]),t._v(" 高级用法")]),t._v(" "),e("h3",{attrs:{id:"解决动态m3u8路径问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决动态m3u8路径问题"}},[t._v("#")]),t._v(" 解决动态m3u8路径问题")]),t._v(" "),e("p",[t._v("某些流媒体提供商的m3u8是动态生成的，不同节点的m3u8地址不一样，例如example.com/clientId1/streamId.m3u8和example.com/clientId2/streamId.m3u8，而本插件默认使用m3u8地址(去掉查询参数)作为channelId。这时候就要构造一个共同的chanelId，使实际观看同一直播/视频的节点处在相同频道中。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 必须先在 p2pConfig 设置 token ，才能自定义 channelId ! 与其他平台互通需要相同的 token 和 channelId 。")]),t._v("\np2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3u8Url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" videoId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("extractVideoIdFromUrl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m3u8Url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 忽略差异部分，构造一个一致的channelId，其中 extractVideoIdFromUrl 需要自己定义，可以抽取url中的视频ID作为结果返回")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// channelId: VIDEO_ID       // for fixed channel id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("用 http://example.com/token123456/video1/playlist.m3u8 来举例, 其中 token123456 是根据不同用户产生的token，video1 是视频的唯一ID。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    token"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_TOKEN")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("channelId")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("m3u8Url")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" parts "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" m3u8Url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" videoId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" parts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/'")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("parts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parts"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" videoId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("按如上配置后，结果如下，token被去掉，只保留video ID：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("\x3c!-- URL to be replaced --\x3e\nhttp://example.com/token123456/video1/playlist.m3u8\n\n\x3c!-- Resulting channelId --\x3e\nvideo1/playlist.m3u8\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",[t._v("如果要与其他平台互通，则必须确保两者拥有相同的 token 和 channelId 。")])]),t._v(" "),e("h3",{attrs:{id:"解决动态ts路径问题"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决动态ts路径问题"}},[t._v("#")]),t._v(" 解决动态ts路径问题")]),t._v(" "),e("p",[t._v("类似动态m3u8路径问题，相同ts文件的路径也可能有差异，这时候需要忽略ts路径差异的部分。插件默认用ts的绝地路径(url)来标识每个ts文件，所以需要通过钩子函数重新构造标识符。可以按如下设置：")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n        streamId: The id of stream\n        sn: The serial number of segment\n        segmentUrl: The url of segment\n     */")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("segmentId")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("streamId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" segmentUrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" range")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tsId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("extractSegmentIdFromUrl")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segmentUrl"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" tsId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"p2p优先策略"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#p2p优先策略"}},[t._v("#")]),t._v(" P2P优先策略")]),t._v(" "),e("p",[t._v("由于建立P2P连接需要时间，默认情况下前几片用HTTP下载。可以通过配置参数，等待P2P建立连接后优先用P2P下载，从而提升P2P效果，但可能会带来延时，建议在热度比较大的频道开启。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    waitForPeer"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    waitForPeerTimeout"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("     "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 可以根据具体场景设置超时时间")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"custom-block warning"},[e("p",[t._v("暂不支持多码率HLS。")])]),t._v(" "),e("h3",{attrs:{id:"允许http-range请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#允许http-range请求"}},[t._v("#")]),t._v(" 允许Http Range请求")]),t._v(" "),e("p",[t._v("当对等端上行带宽不够时，可能导致p2p传输超时而转向http下载，原本p2p下载的数据无法复用。Http Range请求用于补足p2p下载超时的剩余部分数据，要开启Http Range，首先需要源服务器支持，请参考"),e("RouterLink",{attrs:{to:"/cn/views/optimization.html#允许http-range请求"}},[t._v("允许Http Range请求")]),t._v("，然后增加以下配置：")],1),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    useHttpRange"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"自行配置-stun-和-turn-服务器地址"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自行配置-stun-和-turn-服务器地址"}},[t._v("#")]),t._v(" 自行配置 STUN 和 TURN 服务器地址")]),t._v(" "),e("p",[t._v("STUN用于p2p连接过程中获取公网IP地址，TURN则可以在p2p连接不通时用于中转数据。本SDK已内置公开的STUN服务，开发者可以通过P2pConfig来更换STUN地址。TURN服务器则需要开发者自行搭建，可以参考"),e("a",{attrs:{href:"https://github.com/coturn/coturn",target:"_blank",rel:"noopener noreferrer"}},[t._v("coturn"),e("OutboundLink")],1),t._v("。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    webRTCConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       iceServers"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n           "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" urls"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("YOUR_STUN_OR_TURN_SERVER")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h3",{attrs:{id:"切片合法性校验"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#切片合法性校验"}},[t._v("#")]),t._v(" 切片合法性校验")]),t._v(" "),e("p",[t._v("有时候我们需要校验从节点下载的切片的合法性（类似bittorrent的哈希校验）。\nCDNBye提供了一个钩子函数，可以回调下载的切片供开发者进行校验。用于校验的\n哈希表建议直接从服务器下载，开发者可以通过程序计算每个ts文件的哈希并存储于\n特定的文件中或者直接嵌入到m3u8文件中。如果校验失败，直接在回调函数中\n返回false即可。")]),t._v(" "),e("div",{staticClass:"language-javascript extra-class"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[t._v("p2pConfig"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("validateSegment")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("segId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" buffer")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hash "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" hashFile"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getHash")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("segId"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n       "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hash "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("md5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("buffer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);